// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestApp.Masterdb.EF.Models
{
    public partial class LocalDBContext : DbContext
    {
        public LocalDBContext()
        {
        }

        public LocalDBContext(DbContextOptions<LocalDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<Supervisor> Supervisors { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-C6N73Q0\\SQLEXPRESS;Initial Catalog=LocalDB;Integrated Security=True;Encrypt=False");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.EmployeeID).ValueGeneratedNever();

                entity.Property(e => e.PayPerHour).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Worker)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.WorkerID)
                    .HasConstraintName("FK_Employee");
            });

            modelBuilder.Entity<Manager>(entity =>
            {
                entity.ToTable("Manager");

                entity.Property(e => e.ManagerID).ValueGeneratedNever();

                entity.Property(e => e.AnnualSalary).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.MaxExpenseAmount).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.Worker)
                    .WithMany(p => p.Managers)
                    .HasForeignKey(d => d.WorkerID)
                    .HasConstraintName("FK_Manager");
            });

            modelBuilder.Entity<Supervisor>(entity =>
            {
                entity.ToTable("Supervisor");

                entity.Property(e => e.SupervisorID).ValueGeneratedNever();

                entity.Property(e => e.AnnualSalary).HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.Worker)
                    .WithMany(p => p.Supervisors)
                    .HasForeignKey(d => d.WorkerID)
                    .HasConstraintName("FK_Supervisor");
            });

            modelBuilder.Entity<Worker>(entity =>
            {
                entity.ToTable("Worker");

                entity.Property(e => e.WorkerID).ValueGeneratedNever();

                entity.Property(e => e.Address1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}